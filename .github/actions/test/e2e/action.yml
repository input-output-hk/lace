name: e2e-split
description: Execute e2e regression split tests

inputs:
  WALLET_PASSWORD:
    description: 'Test wallet password'
    required: true
  TEST_DAPP_URL:
    description: 'Test DApp Url'
    required: true
  GITHUB_TOKEN:
    description: 'Github token'
    required: true
  BROWSER:
    description: 'browser'
    required: false
    default: 'chrome'
  DISPLAY:
    description: ''
    required: false
    default: ':99.0'
  BATCH:
    description: 'Tests batch'
    required: true
    default: '1'
  RUNNERS_AMOUNT:
    description: 'Amount of runners'
    required: true
    default: '16'

runs:
  using: 'composite'

  steps:
#    - name: Setup Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version-file: '.nvmrc'
#        cache: 'yarn'
#    - name: Node modules cache
#      uses: actions/cache@v4
#      with:
#        path: |
#          node_modules
#          **/node_modules
#        key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
#    - name: Start XVFB
#      shell: bash
#      env:
#        DISPLAY: ${{ inputs.DISPLAY }}
#      run: |
#        Xvfb :99 &
#    - name: Get built extension
#      uses: actions/download-artifact@v4
#      with:
#        name: lace-browser-extension-dist-build
#        path: ./apps/browser-extension-wallet/dist
    - name: Decrypt test data
      working-directory: ./packages/e2e-tests
      run: ./decrypt_secret.sh
      shell: bash
      env:
        WALLET_1_PASSWORD: ${{ inputs.WALLET_PASSWORD }}
#    - name: Resolve suite variable
#      shell: bash
#      id: resolve-variables
#      working-directory: ./packages/e2e-tests
#      env:
#        RUNNERS_AMOUNT: ${{ inputs.RUNNERS_AMOUNT }}
#        BATCH: ${{ inputs.BATCH }}
#      run: |
#        case ${{ inputs.RUNNERS_AMOUNT }} in
#          16)
#            export suites=--suite batch{env.BATCH};
#            ;;
#          8)
#            batch1={env.BATCH} * 2 - 1;
#            batch2={env.BATCH} * 2;
#            export suites=--suite batch{batch1} --suite batch{batch2};
#            ;;
#          4)
#            export suites=--suite batch{env.BATCH};
#            ;;
#          1)
#            export suites="--suite batch1 --suite batch2 --suite batch3 --suite batch4 --suite batch5 --suite batch6 --suite batch7 --suite batch8 --suite batch9 --suite batch10 --suite batch11 --suite batch12 --suite batch13 --suite batch14 --suite batch15 --suite batch16";
#            ;;
#          *)
#            runners_array="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16";
#            exit 1
#            ;;
#        esac
#        echo "Provisioning runners array: {env.runners_array}"


#        suitesAmount=$(ls -1 ./tests/suites | wc -l)
#        runnersAmount=${{ inputs.RUNNERS_AMOUNT }}
#        batch=${{ inputs.BATCH }}
#        batchSize=$((suitesAmount / runnersAmount))
#        start=$((batchSize * (batch - 1)))
#        end=$((batchSize * batch))
#        if [ $batch -eq $runnersAmount ]; then
#          end=$suitesAmount
#        fi
#        echo "Suites amount: $suitesAmount"
#        echo "Runners amount: $runnersAmount"
#        echo "Batch size: $batchSize"
#        echo "Start: $start"
#        echo "End: $end"
#        echo "::set-output name=start::$start"
#        echo "::set-output name=end::$end"
    - name: Execute E2E tests
      shell: bash
      id: e2e-tests
      working-directory: ./packages/e2e-tests
      env:
        WALLET_1_PASSWORD: ${{ inputs.WALLET_PASSWORD }}
        TEST_DAPP_URL: ${{ inputs.TEST_DAPP_URL }}
        BROWSER: ${{ inputs.BROWSER }}
        DISPLAY: ${{ inputs.DISPLAY }}
        BATCH: ${{ inputs.BATCH }}
        RUNNERS_AMOUNT: ${{ inputs.RUNNERS_AMOUNT }}
      run: |
        echo "^^^Determine SUITE var"
        echo "^^^BATCH: $BATCH"
        echo "^^^RUNNERS_AMOUNT: $RUNNERS_AMOUNT"
#        case ${{ inputs.RUNNERS_AMOUNT }} in
#          16)
#            export SUITES=--suite batch$BATCH;
#            ;;
#          8)
#            echo "^^^BATCH: $BATCH"
#            batch1=$BATCH * 2 - 1;
#            batch2=$BATCH * 2;
#            export SUITES=--suite batch$batch1 --suite batch$batch2;
#            ;;
#          4)
#            export SUITES=--suite batch${BATCH};
#            ;;
#          1)
#            export SUITES="--suite batch1 --suite batch2 --suite batch3 --suite batch4 --suite batch5 --suite batch6 --suite batch7 --suite batch8 --suite batch9 --suite batch10 --suite batch11 --suite batch12 --suite batch13 --suite batch14 --suite batch15 --suite batch16";
#            ;;
#          *)
#            export SUITES="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16";
#            exit 1
#            ;;
#        esac
#        echo "^^^SUITES: $SUITES"
#        runCommand="yarn wdio run wdio.conf.${BROWSER}.ts $SUITES --cucumberOpts.tags='@Testnet and not @Pending'"
#        eval "$runCommand";
    - name: Save dmesg logs
      shell: bash
      if: always()
      working-directory: ./packages/e2e-tests
      run: |
        sudo dmesg > ./dmesg.log
    - name: Publish artifacts (logs, reports, screenshots)
      if: always()
      uses: actions/upload-artifact@v4
      env:
        BATCH: ${{ inputs.BATCH }}
      with:
        name: runner-artifacts-${{ env.BATCH }}
        path: |
          ./packages/e2e-tests/screenshots
          ./packages/e2e-tests/logs
          ./packages/e2e-tests/reports/allure/results
          ./packages/e2e-tests/dmesg.log
        retention-days: 5
