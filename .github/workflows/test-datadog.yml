name: Test Datadog v2 API

on:
  workflow_dispatch:
  push:
    branches: [ main, test/berno_prom_metrics ]

jobs:
  test-datadog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Datadog v2 API
        run: |
          echo "üîç Starting Datadog v2 API test..."
          echo "üìä API Key present: $([ -n "${{ secrets.DATADOG_API_KEY }}" ] && echo "YES" || echo "NO")"
          echo "üåê Datadog Site: us5.datadoghq.com"
          echo "‚è∞ Timestamp: $(date)"
          echo "üìù Workflow: ${{ github.workflow }}"
          echo "üè∑Ô∏è Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üîó Commit: ${{ github.sha }}"
          echo ""
          
          if [ -n "${{ secrets.DATADOG_API_KEY }}" ]; then
            echo "‚úÖ API Key is set, proceeding with test..."
            
            # Prepare the JSON payload (v2 API format) - Testing CI metrics
            json_payload="{
              \"series\": [{
                \"metric\": \"test.datadog.integration\",
                \"points\": [{\"timestamp\": $(date +%s), \"value\": 42}],
                \"tags\": [\"service:lace-wallet\", \"env:test\", \"workflow:test-datadog\"]
              }, {
                \"metric\": \"test.datadog.simple\",
                \"points\": [{\"timestamp\": $(date +%s), \"value\": 100}],
                \"tags\": [\"service:lace-wallet\", \"env:test\", \"workflow:test-datadog\"]
              }, {
                \"metric\": \"github.ci.pipeline.duration\",
                \"points\": [{\"timestamp\": $(date +%s), \"value\": 120}],
                \"tags\": [\"service:lace-wallet\", \"env:test\", \"workflow:test-datadog\", \"job:test-datadog\"]
              }, {
                \"metric\": \"github.ci.pipeline.status\",
                \"points\": [{\"timestamp\": $(date +%s), \"value\": 1}],
                \"tags\": [\"service:lace-wallet\", \"env:test\", \"workflow:test-datadog\", \"status:success\"]
              }]
            }"
            
            echo "üì§ Sending JSON payload:"
            echo "$json_payload"
            echo ""
            echo "üîç JSON validation:"
            echo "$json_payload" | jq '.' 2>/dev/null && echo "‚úÖ JSON is valid" || echo "‚ùå JSON is invalid"
            echo ""
            
            # Send metrics to Datadog v2 API
            echo "üöÄ Sending request to Datadog v2 API..."
            response=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}\nTOTAL_TIME:%{time_total}s\n" \
              -X POST "https://api.us5.datadoghq.com/api/v2/series" \
              -H "Content-Type: application/json" \
              -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
              -d "$json_payload")
            
            echo "üì• Raw response:"
            echo "$response"
            echo ""
            
            # Extract HTTP status code
            http_code=$(echo "$response" | grep "HTTP_STATUS_CODE:" | cut -d: -f2)
            total_time=$(echo "$response" | grep "TOTAL_TIME:" | cut -d: -f2)
            response_body=$(echo "$response" | sed '/HTTP_STATUS_CODE:/d' | sed '/TOTAL_TIME:/d')
            
            echo "üìä Response Analysis:"
            echo "   HTTP Status Code: $http_code"
            echo "   Response Time: ${total_time}s"
            echo "   Response Body: $response_body"
            echo ""
            
            if [ "$http_code" = "202" ]; then
              echo "‚úÖ SUCCESS: Metrics sent successfully to Datadog!"
              echo "   Status: $http_code"
              echo "   Time: ${total_time}s"
            else
              echo "‚ùå ERROR: Failed to send metrics to Datadog"
              echo "   Status: $http_code"
              echo "   Error: $response_body"
              echo ""
              echo "üîç Troubleshooting tips:"
              echo "   1. Check API key permissions in Datadog"
              echo "   2. Verify the API key is correct"
              echo "   3. Check if the key has 'Metrics Write' permission"
              echo "   4. Ensure you're looking at us5.datadoghq.com"
            fi
            
            # Test CI Events functionality
            echo ""
            echo "üìù Testing CI Events..."
            echo "üîç Debug Info:"
            echo "   Datadog Site: us5.datadoghq.com"
            echo "   Events API: https://api.us5.datadoghq.com/api/v1/events"
            echo "   API Key: $([ -n "${{ secrets.DATADOG_API_KEY }}" ] && echo "SET" || echo "NOT SET")"
            echo ""
            
            event_payload="{
              \"title\": \"Test Datadog CI Event: ${{ github.workflow }}\",
              \"text\": \"Test workflow ${{ github.workflow }} completed successfully\\nRepository: ${{ github.repository }}\\nBranch: ${{ github.ref_name }}\\nCommit: ${{ github.sha }}\",
              \"tags\": [\"service:lace-wallet\", \"env:test\", \"workflow:test-datadog\", \"status:success\", \"repo:${{ github.repository }}\"],
              \"alert_type\": \"info\",
              \"source_type_name\": \"github\"
            }"
            
            echo "üì§ Sending CI event payload:"
            echo "$event_payload"
            echo ""
            echo "üîç JSON validation for event:"
            echo "$event_payload" | jq '.' 2>/dev/null && echo "‚úÖ Event JSON is valid" || echo "‚ùå Event JSON is invalid"
            echo ""
            
            event_response=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}\nTOTAL_TIME:%{time_total}s\n" \
              -X POST "https://api.us5.datadoghq.com/api/v1/events" \
              -H "Content-Type: application/json" \
              -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
              -d "$event_payload")
            
            echo "üì• Raw event response:"
            echo "$event_response"
            echo ""
            
            event_http_code=$(echo "$event_response" | grep "HTTP_STATUS_CODE:" | cut -d: -f2)
            event_total_time=$(echo "$event_response" | grep "TOTAL_TIME:" | cut -d: -f2)
            event_response_body=$(echo "$event_response" | sed '/HTTP_STATUS_CODE:/d' | sed '/TOTAL_TIME:/d')
            
            echo "üìä Event Response Analysis:"
            echo "   HTTP Status Code: $event_http_code"
            echo "   Response Time: ${event_total_time}s"
            echo "   Response Body: $event_response_body"
            echo ""
            
            if [ "$event_http_code" = "202" ]; then
              echo "‚úÖ SUCCESS: CI Event sent successfully to Datadog!"
              echo "   Status: $event_http_code"
              echo "   Time: ${event_total_time}s"
            else
              echo "‚ùå ERROR: Failed to send CI Event to Datadog"
              echo "   Status: $event_http_code"
              echo "   Error: $event_response_body"
              echo ""
              echo "üîç Event troubleshooting tips:"
              echo "   1. Check if API key has 'Events Write' permission"
              echo "   2. Verify the event payload format"
              echo "   3. Check Datadog v1 events API documentation"
              echo "   4. Ensure you're using the correct endpoint"
            fi
            
            # Test API permissions and try different event formats
            echo ""
            echo "üîç Testing API permissions and alternative formats..."
            
            # Test 1: Check if we can read events (permissions test)
            echo "üìã Test 1: Checking API permissions..."
            permissions_response=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}\n" \
              -X GET "https://api.us5.datadoghq.com/api/v1/events?start=$(date -d '1 hour ago' +%s)&end=$(date +%s)" \
              -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
              -H "Content-Type: application/json")
            
            permissions_http_code=$(echo "$permissions_response" | grep "HTTP_STATUS_CODE:" | cut -d: -f2)
            echo "   Events Read Permission: $permissions_http_code"
            
            # Test 2: Try minimal event format
            echo ""
            echo "üìã Test 2: Minimal event format..."
            minimal_event_payload="{
              \"title\": \"Minimal Test\",
              \"text\": \"Minimal test event\",
              \"tags\": [\"test:minimal\"]
            }"
            
            minimal_response=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}\nTOTAL_TIME:%{time_total}s\n" \
              -X POST "https://api.us5.datadoghq.com/api/v1/events" \
              -H "Content-Type: application/json" \
              -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
              -d "$minimal_event_payload")
            
            minimal_http_code=$(echo "$minimal_response" | grep "HTTP_STATUS_CODE:" | cut -d: -f2)
            minimal_response_body=$(echo "$minimal_response" | sed '/HTTP_STATUS_CODE:/d' | sed '/TOTAL_TIME:/d')
            
            echo "   Minimal Event Status: $minimal_http_code"
            echo "   Minimal Event Response: $minimal_response_body"
            
            # Test 3: Create a very distinctive event for easy finding
            echo ""
            echo "üìã Test 3: Creating distinctive event for UI testing..."
            distinctive_event_payload="{
              \"title\": \"üéØ BERNO TEST EVENT - LOOK FOR THIS ONE\",
              \"text\": \"This is a distinctive test event created at $(date). Look for this exact title in the Events Explorer.\\n\\nRepository: ${{ github.repository }}\\nWorkflow: ${{ github.workflow }}\\nTimestamp: $(date +%s)\",
              \"tags\": [\"test:distinctive\", \"user:berno\", \"search:me\", \"service:lace-wallet\"],
              \"alert_type\": \"info\",
              \"priority\": \"normal\"
            }"
            
            distinctive_response=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}\nTOTAL_TIME:%{time_total}s\n" \
              -X POST "https://api.us5.datadoghq.com/api/v1/events" \
              -H "Content-Type: application/json" \
              -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
              -d "$distinctive_event_payload")
            
            distinctive_http_code=$(echo "$distinctive_response" | grep "HTTP_STATUS_CODE:" | cut -d: -f2)
            distinctive_response_body=$(echo "$distinctive_response" | sed '/HTTP_STATUS_CODE:/d' | sed '/TOTAL_TIME:/d')
            
            echo "   Distinctive Event Status: $distinctive_http_code"
            echo "   Distinctive Event Response: $distinctive_response_body"
            
            # Extract the event ID for direct URL
            if [ "$distinctive_http_code" = "202" ]; then
              event_id=$(echo "$distinctive_response_body" | jq -r '.event.id_str' 2>/dev/null)
              if [ -n "$event_id" ] && [ "$event_id" != "null" ]; then
                echo "   üéØ Direct URL: https://us5.datadoghq.com/event/event?id=$event_id"
                echo "   üîç Search for: 'BERNO TEST EVENT' in Events Explorer"
              fi
            fi
            
            # Summary
            echo ""
            echo "üìä API Test Summary:"
            echo "   Original Event: $event_http_code"
            echo "   Read Permission: $permissions_http_code"
            echo "   Minimal Event: $minimal_http_code"
            echo "   Distinctive Event: $distinctive_http_code"
            echo ""
            echo "üîç Troubleshooting Guide:"
            echo "   - 202: Success (events created successfully)"
            echo "   - 403: Forbidden (API key lacks permissions)"
            echo "   - 401: Unauthorized (invalid API key)"
            echo "   - 400: Bad Request (payload format issue)"
            echo ""
            echo "üéØ To find events in Datadog UI:"
            echo "   1. Go to: https://us5.datadoghq.com/event/explorer"
            echo "   2. Search for: 'BERNO TEST EVENT' or 'Test Datadog CI Event'"
            echo "   3. Check time range: Last 1 hour"
            echo "   4. Clear any filters on the left sidebar"
            echo "   5. Try direct URLs from the logs above"
            
            echo ""
            echo "üîç To verify in Datadog UI:"
            echo "   1. Go to Metrics Explorer"
            echo "   2. Search for: test.datadog.integration"
            echo "   3. Set time range to 'Last 1 hour'"
            echo "   4. Look for metrics with tags: service:lace-wallet, env:test"
            echo ""
            echo "üìä Also check for CI metrics:"
            echo "   5. Search for: github.ci.pipeline.duration"
            echo "   6. Search for: github.ci.pipeline.status"
            echo "   7. Check Events tab for CI events"
            echo "   8. Look for event titled: 'Test Datadog CI Event: test-datadog'"
            
          else
            echo "‚ùå ERROR: DATADOG_API_KEY secret is not set"
            echo ""
            echo "üîß To fix this:"
            echo "   1. Go to repository Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "   2. Add a new repository secret named 'DATADOG_API_KEY'"
            echo "   3. Set the value to your Datadog API key"
            echo "   4. Make sure the key has 'Metrics Write' permission"
          fi
          
          echo ""
          echo "üèÅ Test completed at $(date)" 