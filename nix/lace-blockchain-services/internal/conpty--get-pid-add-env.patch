diff --git a/conpty.go b/conpty.go
index 5314414..1efdc3f 100644
--- a/conpty.go
+++ b/conpty.go
@@ -153,7 +153,7 @@ func getStartupInfoExForPTY(hpc _HPCON) (*_StartupInfoEx, error) {
 	return &siEx, nil
 }
 
-func createConsoleProcessAttachedToPTY(hpc _HPCON, commandLine string) (*windows.ProcessInformation, error) {
+func createConsoleProcessAttachedToPTY(hpc _HPCON, commandLine string, envBlock *uint16) (*windows.ProcessInformation, error) {
 	cmdLine, err := windows.UTF16PtrFromString(commandLine)
 	if err != nil {
 		return nil, err
@@ -163,14 +163,18 @@ func createConsoleProcessAttachedToPTY(hpc _HPCON, commandLine string) (*windows
 		return nil, err
 	}
 	var pi windows.ProcessInformation
+	flags := uint32(windows.EXTENDED_STARTUPINFO_PRESENT)
+	if envBlock != nil {
+		flags |= uint32(windows.CREATE_UNICODE_ENVIRONMENT)
+	}
 	err = windows.CreateProcess(
 		nil, // use this if no args
 		cmdLine,
 		nil,
 		nil,
 		false, // inheritHandle
-		windows.EXTENDED_STARTUPINFO_PRESENT,
-		nil,
+		flags,
+		envBlock,
 		nil,
 		&siEx.startupInfo,
 		&pi)
@@ -233,6 +237,10 @@ func (cpty *ConPty) Resize(width, height int) error {
 	return win32ResizePseudoConsole(cpty.hpc, &coords)
 }
 
+func (cpty *ConPty) GetPid() uint32 {
+	return cpty.pi.ProcessId
+}
+
 func (cpty *ConPty) Read(p []byte) (int, error) {
 	return cpty.cmdOut.Read(p)
 }
@@ -243,6 +251,7 @@ func (cpty *ConPty) Write(p []byte) (int, error) {
 
 type conPtyArgs struct {
 	coords _COORD
+	envBlock *uint16
 }
 
 type ConPtyOption func(args *conPtyArgs)
@@ -254,6 +263,12 @@ func ConPtyDimensions(width, height int) ConPtyOption {
 	}
 }
 
+func ConPtyEnv(envBlock *uint16) ConPtyOption {
+	return func(args *conPtyArgs) {
+		args.envBlock = envBlock
+	}
+}
+
 // Start a new process specified in `commandLine` and attach a pseudo console using the Windows
 // ConPty API. If ConPty is not available, ErrConPtyUnsupported will be returned.
 //
@@ -265,6 +280,7 @@ func Start(commandLine string, options ...ConPtyOption) (*ConPty, error) {
 	}
 	args := &conPtyArgs{
 		coords: _COORD{defaultConsoleWidth, defaultConsoleHeight},
+		envBlock: nil,
 	}
 	for _, opt := range options {
 		opt(args)
@@ -285,7 +301,7 @@ func Start(commandLine string, options ...ConPtyOption) (*ConPty, error) {
 		return nil, err
 	}
 
-	pi, err := createConsoleProcessAttachedToPTY(hPc, commandLine)
+	pi, err := createConsoleProcessAttachedToPTY(hPc, commandLine, args.envBlock)
 	if err != nil {
 		closeHandles(ptyIn, ptyOut, cmdIn, cmdOut)
 		win32ClosePseudoConsole(hPc)
