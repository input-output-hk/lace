name: E2E Tests Linux split

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - 'release/**'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to use'
        required: true
        default: 'chrome'
        type: choice
        options:
          - chrome
          - firefox
      network:
        description: 'network to use'
        required: true
        default: 'preprod'
        type: choice
        options:
          - preprod
          - mainnet
      runner:
        type: choice
        required: true
        default: 'ubuntu-22.04'
        description: runner to use
        options:
          - self-hosted
          - ubuntu-22.04
          - ubuntu-latest
      smoke_only:
        type: boolean
        description: 'Run only smoke tests'
        required: true
        default: false
      service_worker_logs:
        type: boolean
        description: 'Collect service worker logs'
        required: true
        default: false
      tags:
        type: string
        description: 'Tags(optional)'
        required: false
        default: ''

run-name: "E2E | os: Linux | browser: ${{ github.event.inputs.browser || 'chrome' }} | network: ${{ github.event.inputs.network || 'preprod' }} | #${{ github.run_number }} | tags: ${{ github.event.inputs.tags || '' }} | smoke only: ${{ github.event.inputs.smoke_only || 'false' }}"

env:
  BROWSER: ${{ github.event.inputs.browser || 'chrome' }}
  NETWORK: ${{ github.event.inputs.network || 'preprod' }}
  RUN: ${{ github.run_number }}
  DISPLAY: ':99.0'
  NODE_OPTIONS: --max-old-space-size=16384
  BRANCH: ${{ github.ref_name }}
  BUILD_ARTIFACT_NAME: lace-${{ startsWith(github.ref_name, 'release/') && 'release' || 'dev' }}-${{ github.sha }}-${{ github.event.inputs.browser || 'chrome' }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Provision step
        run: |
          echo "Provisioning ${{ github.event.inputs.runner }}"

      - name: Check if build exists
        shell: bash
        id: check-build-exists
        run: |
          ART_ID=$(curl "https://api.github.com/repos/input-output-hk/lace/actions/artifacts?name=${{ env.BUILD_ARTIFACT_NAME }}" | jq -r .artifacts[0].id)

          if ([ "$ART_ID" == "null" ]) then
            echo "Lace build artifact not found"
            echo "build_exists=false" >> $GITHUB_OUTPUT
          else
            echo "Build artifact found"
            echo "build_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Print run parameters
        run: |
          echo "Branch: ${{ github.ref_name }}"
          echo "Browser: ${{ github.event.inputs.browser || 'chrome' }}"
          echo "Network: ${{ github.event.inputs.network || 'preprod' }}"
          echo "Runner: ${{ github.event.inputs.runner || 'ubuntu-22.04' }}"
          echo "Smoke only: ${{ github.event.inputs.smoke_only || 'false' }}"
          echo "Tags(optional): ${{ github.event.inputs.tags || '' }}"
          echo "Build artifact name: ${{ env.BUILD_ARTIFACT_NAME }}"
    outputs:
      runner: ${{ github.event.inputs.runner || 'ubuntu-22.04' }}
      smoke_only: ${{ github.event.inputs.smoke_only || false }}
      tags: ${{ github.event.inputs.tags || '' }}
      build_exists: ${{ steps.check-build-exists.outputs.build_exists }}

  build:
    name: Build Lace
    runs-on: ${{ needs.setup.outputs.runner }}
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Lace artifact
        if: needs.setup.outputs.build_exists == 'false'
        uses: ./.github/shared/build
        with:
          BLOCKFROST_PROJECT_ID_MAINNET: ${{ secrets.BLOCKFROST_PROJECT_ID_MAINNET }}
          BLOCKFROST_PROJECT_ID_PREPROD: ${{ secrets.BLOCKFROST_PROJECT_ID_PREPROD }}
          BLOCKFROST_PROJECT_ID_PREVIEW: ${{ secrets.BLOCKFROST_PROJECT_ID_PREVIEW }}
          BLOCKFROST_PROJECT_ID_SANCHONET: ${{ secrets.BLOCKFROST_PROJECT_ID_SANCHONET }}
          MAESTRO_PROJECT_ID_MAINNET: ${{ secrets.MAESTRO_PROJECT_ID_MAINNET }}
          MAESTRO_PROJECT_ID_TESTNET: ${{ secrets.MAESTRO_PROJECT_ID_TESTNET }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          LACE_EXTENSION_KEY: ${{ secrets.MANIFEST_PUBLIC_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: 'e2e-tests'
          WALLET_POLLING_INTERVAL_IN_SEC: 5
          BROWSER_TARGET: ${{ env.BROWSER }}
          E2E_FORCE_TREZOR_PICKED: true

      - name: Upload build artifact
        if: needs.setup.outputs.build_exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: '${{ env.BUILD_ARTIFACT_NAME }}'
          path: ./apps/browser-extension-wallet/dist

  tests:
    name: E2E tests
    strategy:
      fail-fast: false
      matrix:
        batch: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
    runs-on: ${{ needs.setup.outputs.runner }}
    needs: [setup, build]
    permissions:
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and install dependencies
        uses: ./.github/actions/install
        with:
          WALLET_PASSWORD: ${{ secrets.WALLET_PASSWORD_TESTNET }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Download Lace build artifact
        shell: bash
        id: download-lace-build-artifact
        run: |
          ART_ID=$(curl "https://api.github.com/repos/input-output-hk/lace/actions/artifacts?name=${{ env.BUILD_ARTIFACT_NAME }}" | jq -r .artifacts[0].id)
          curl -v -o build_artifact.zip --location "https://api.github.com/repos/input-output-hk/lace/actions/artifacts/${ART_ID}/zip" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
          unzip build_artifact.zip -d ./apps/browser-extension-wallet/dist
          echo "Build artifact found and downloaded"

      - name: Setup Firefox Developer Edition
        id: setup-firefox
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: 'latest-devedition'
        if: env.BROWSER == 'firefox'

      - name: Verify Firefox Installation
        if: env.BROWSER == 'firefox'
        shell: bash
        run: |
          echo Installed firefox versions: ${{ steps.setup-firefox.outputs.firefox-version }}
          ${{ steps.setup-firefox.outputs.firefox-path }} --version

      - name: Execute E2E tests
        uses: ./.github/actions/test/e2e
        with:
          BROWSER: ${{ env.BROWSER }}
          BATCH: ${{ matrix.batch }}
          SMOKE_ONLY: ${{ needs.setup.outputs.smoke_only }}
          TAGS: ${{ needs.setup.outputs.tags }}
          TEST_DAPP_URL: ${{ secrets.TEST_DAPP_URL }}
          WALLET_PASSWORD: ${{ secrets.WALLET_PASSWORD_TESTNET }}
          SERVICE_WORKER_LOGS: ${{ needs.setup.outputs.service_worker_logs }}
          FIREFOX_BINARY: ${{ steps.setup-firefox.outputs.firefox-path }}

  processReports:
    name: Process e2e test reports
    needs: [setup, tests]
    runs-on: ${{ needs.setup.outputs.runner }}
    # when cancelling job always() will prevent step from being cancelled and we don't want process results in this case
    if: ${{ success() || failure() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: 'runner-artifacts-*'
          merge-multiple: true

      - name: Create allure properties
        working-directory: './artifacts/reports/allure/results'
        run: |
          echo "
          branch=${BRANCH}
          env=${NETWORK}
          browser=${BROWSER}
          platform=Linux
          smoke_only=${{ needs.setup.outputs.smoke_only }}
          tags=${{ needs.setup.outputs.tags }}
          " > environment.properties

      - name: Convert metrics JSON to Prometheus format
        working-directory: './packages/e2e-tests/tools/'
        run: |
          ./convert_metrics_to_prometheus.sh "${{ github.workflow }}" "${{ github.run_id }}" ../../../artifacts/metrics

      - name: Publish allure report to S3
        uses: andrcuns/allure-publish-action@v2.9.0
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.E2E_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.E2E_AWS_SECRET_ACCESS_KEY }}
        with:
          storageType: s3
          resultsGlob: './artifacts/reports/allure/results'
          bucket: lace-e2e-test-results
          prefix: 'all/linux/${BROWSER}/${RUN}'
          copyLatest: true
          ignoreMissingResults: true
          baseUrl: 'https://${{ secrets.E2E_REPORTS_USER }}:${{ secrets.E2E_REPORTS_PASSWORD }}@${{ secrets.E2E_REPORTS_URL }}'

      - name: Add link to summary
        run: |
          echo "TEST RESULTS:"
          echo "https://${{ secrets.E2E_REPORTS_USER }}:${{ secrets.E2E_REPORTS_PASSWORD }}@${{ secrets.E2E_REPORTS_URL }}/all/linux/${{ env.BROWSER }}/${{ env.RUN }}/index.html | browser: ${{ env.BROWSER }} | network: ${{ env.NETWORK }} | platform: linux | tags: ${{ needs.setup.outputs.tags }} | smoke only: ${{ needs.setup.outputs.smoke_only }}" >> $GITHUB_STEP_SUMMARY

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_COLOR: "${{ contains(needs.*.result, 'failure') && 'failure' || 'good' }}"
          SLACK_ICON_EMOJI: ':lace:'
          SLACK_MESSAGE: 'https://${{ secrets.E2E_REPORTS_USER }}:${{ secrets.E2E_REPORTS_PASSWORD }}@${{ secrets.E2E_REPORTS_URL }}/all/linux/${{ env.BROWSER }}/${{ env.RUN }}/index.html | browser: ${{ env.BROWSER }} | network: ${{ env.NETWORK }} | platform: linux  | tags: ${{ needs.setup.outputs.tags }} | smoke only: ${{ needs.setup.outputs.smoke_only }}'
          SLACK_TITLE: 'Test automation results :rocket:'
          SLACK_USERNAME: lace-qa-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Deleting chrome tmp files
        id: clean-chrome-tmp-files
        if: ${{ needs.setup.outputs.runner == 'self-hosted' }}
        run: |
          runCommand="rm -rf /tmp/.org.chromium.*"
          eval "$runCommand";

      - name: Upload allure tests results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: ./artifacts/reports/allure/results

      - name: Upload performance metrics
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: ./artifacts/metrics

      - name: Serve metrics file locally
        run: |
          cat <<'PY' > serve_metrics.py
          import http.server, socketserver, pathlib, sys
          FILE = pathlib.Path('./artifacts/metrics/prometheus.txt')
          class H(http.server.SimpleHTTPRequestHandler):
              def do_GET(self):
                  if self.path == './artifacts/metrics':
                      content = FILE.read_bytes() if FILE.exists() else b'# metrics not ready\n'
                      self.send_response(200)
                      self.end_headers()
                      self.wfile.write(content)
                  else:
                      self.send_error(404)
          with socketserver.TCPServer(('0.0.0.0', 9101), H) as s:
              print('Serving metrics on :9101/metrics', file=sys.stderr)
              s.serve_forever()
          PY
          python serve_metrics.py &

        # ------------------------------------------------------------------------
        # 3) Write Alloy (River) config — scrape localhost:9101 and remote_write
        # ------------------------------------------------------------------------
      - name: Generate alloy.river
        env:
          GRAFANA_CLOUD_USERNAME: ${{ secrets.GRAFANA_ALLOY_USERNAME }}
          GRAFANA_CLOUD_API_KEY:  ${{ secrets.GRAFANA_ALLOY_API_KEY }}
        run: |
          mkdir -p alloy
          cat > alloy/alloy.river <<RIVER
          prometheus.remote_write "gc" {
            endpoint {
              url = "https://prometheus-us-central1.grafana.net/api/prom/push"
              basic_auth {
                username = env("GRAFANA_CLOUD_USERNAME")
                password = env("GRAFANA_CLOUD_API_KEY")
              }
            }
          }

          prometheus.scrape "e2e" {
            targets = [{
              __address__ = "127.0.0.1:9101",
            }]
            forward_to = [prometheus.remote_write.gc.receiver]
          }
          RIVER

        # ------------------------------------------------------------------------
        # 4) Launch Alloy for ~45 s to scrape + push the data, then shut it down.
        # ------------------------------------------------------------------------
      - name: Run Alloy and push metrics
        run: |
          docker run --rm \
            -e ALLOY_CONFIG=/etc/alloy.river \
            -v "$PWD/alloy/alloy.river:/etc/alloy.river:ro" \
            grafana/alloy:latest run /etc/alloy.river &
          ALLOY_PID=$!
          # wait for two scrape cycles + remote write
          sleep 45
          kill "$ALLOY_PID" || true

      #      - name: Create Prometheus config
      #        env:
      #          PUSH_URL: ${{ secrets.GRAFANA_PUSH_URL }}    # e.g., https://prometheus-us-central1.grafana.net/api/prom/push
      #          PUSH_USER: ${{ secrets.GRAFANA_USERNAME }}   # e.g., 787878
      #          PUSH_PASS: ${{ secrets.GRAFANA_PASSWORD }}   # e.g., eyJrIjoxxxxxxxxxxxxxxyMX0=
      #        run: |
      #          cat >prometheus.yml <<EOF
      #          global:
      #            scrape_interval: 5s
      #          scrape_configs:
      #            - job_name: 'e2e-perf-metrics'
      #              static_configs:
      #                - targets: ['pushgateway:9091']
      #          remote_write:
      #            - url: "$PUSH_URL"
      #              basic_auth:
      #                username: "$PUSH_USER"
      #                password: "$PUSH_PASS"
      #          EOF
      #          pwd
      #          ls -al ./artifacts/metrics/prometheus.txt
      #          head ./artifacts/metrics/prometheus.txt
      #
      #      - name: Start pushgateway server
      #        run: |
      #          docker run -d --name pushgateway -p 9091:9091 prom/pushgateway
      #          cat ./artifacts/metrics/prometheus.txt  | curl --data-binary @- http://localhost:9091/metrics/job/e2e-perf
      #          #docker run -d --name http-server -v $(pwd):/app -w /app -p 8000:8000 python:3.11-slim python -m http.server 8000 > http.log 2>&1
      #          printf '\n*****************\n'
      #          echo 'This is my current directory:'
      #          pwd
      #          printf '\n*****************\n'
      #          echo 'This is ls -al in that directory'
      #          ls -al
      #          printf '\n*****************\n'
      #
      #      - name: Run Prometheus
      #        run: |
      #          # Enable logs for debugging
      #          #docker run --name prometheus -v $(pwd):/etc/prometheus -p 9090:9090 --link pushgateway:pushgateway prom/prometheus:latest --config.file=/etc/prometheus/prometheus.yml --web.listen-address=:9090 --log.level=debug
      #          docker run -d --name prometheus -v $(pwd):/etc/prometheus -p 9090:9090 --link pushgateway:pushgateway prom/prometheus:latest --config.file=/etc/prometheus/prometheus.yml --web.listen-address=:9090 > prom.log 2>&1
      #          sleep 60
      #          # Uncomment for troubleshooting.
      #          printf '\n*****************\n'
      #          printf '\n curl e2e_cpu_seconds_total \n'
      #          curl http://localhost:9090/api/v1/query?query=e2e_cpu_seconds_total_v1
      #          printf '\n*****************\n'
      #          printf '\n cat prom.log \n'
      #          cat prom.log
      #          #printf '\n*****************\n'
      #          #printf '\n send_failures_total \n'
      #          #curl 'http://localhost:9090/api/v1/query?query=prometheus_remote_storage_queue_send_failures_total'
      #          #printf '\n*****************\n'
      #          #printf '\n storage_retries_total \n'
      #          #curl 'http://localhost:9090/api/v1/query?query=prometheus_remote_storage_retries_total'


