name: e2e-split
description: Execute e2e regression split tests

inputs:
  WALLET_PASSWORD:
    description: 'Test wallet password'
    required: true
  TEST_DAPP_URL:
    description: 'Test DApp Url'
    required: true
  GITHUB_TOKEN:
    description: 'Github token'
    required: true
  BROWSER:
    description: 'browser'
    required: false
    default: 'chrome'
  DISPLAY:
    description: ''
    required: false
    default: ':99.0'
  BATCH:
    description: 'Tests batch'
    required: true
    default: '1'

runs:
  using: 'composite'

  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'yarn'
    - name: Node modules cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
    - name: Start XVFB
      shell: bash
      env:
        DISPLAY: ${{ inputs.DISPLAY }}
      run: |
        Xvfb :99 &
    - name: Check if build exists already then download it
      shell: bash
      id: download-build-if-exists
      run: |
        export ART_ID=$(curl https://api.github.com/repos/input-output-hk/lace/actions/artifacts?name=lace-browser-extension-dist-build-${{ github.sha }} | jq -r .artifacts[0].id)
        if [ ! -z "$ART_ID" ]; then
          echo $(pwd)
          echo $(ls -ltrh)
          curl -o build_artifact.zip --location 'https://api.github.com/repos/input-output-hk/lace/actions/artifacts/'$ART_ID'/zip' -H "$(echo Authorization: Bearer $INPUT_GITHUB_TOKEN)"
          mkdir ./apps/browser-extension-wallet/dist
          unzip -f build_artifact.zip -o ./apps/browser-extension-wallet/dist
          echo "Build artifact found and downloaded"
        fi
#    - name: Get built extension
#      uses: actions/download-artifact@v4
#      with:
#        name: lace-browser-extension-dist-build-${{ github.sha }}
#        path: ./apps/browser-extension-wallet/dist
    - name: Setup upterm session
      if: always()
      uses: lhotari/action-upterm@v1
    - name: Decrypt test data
      working-directory: ./packages/e2e-tests
      run: ./decrypt_secret.sh
      shell: bash
      env:
        WALLET_1_PASSWORD: ${{ inputs.WALLET_PASSWORD }}
    - name: Execute E2E tests
      shell: bash
      id: e2e-tests
      working-directory: ./packages/e2e-tests
      env:
        WALLET_1_PASSWORD: ${{ inputs.WALLET_PASSWORD }}
        TEST_DAPP_URL: ${{ inputs.TEST_DAPP_URL }}
        BROWSER: ${{ inputs.BROWSER }}
        DISPLAY: ${{ inputs.DISPLAY }}
        BATCH: ${{ inputs.BATCH }}
      run: |
        runCommand="yarn wdio run wdio.conf.${BROWSER}.ts --suite batch${BATCH} --cucumberOpts.tags='@Testnet and not @Pending'"
        eval "$runCommand";
    - name: Save dmesg logs
      shell: bash
      if: always()
      working-directory: ./packages/e2e-tests
      run: |
        sudo dmesg > ./dmesg.log
    - name: Publish artifacts (logs, reports, screenshots)
      if: always()
      uses: actions/upload-artifact@v4
      env:
        BATCH: ${{ inputs.BATCH }}
      with:
        name: runner-artifacts-${{ env.BATCH }}
        path: |
          ./packages/e2e-tests/screenshots
          ./packages/e2e-tests/logs
          ./packages/e2e-tests/reports/allure/results
          ./packages/e2e-tests/dmesg.log
        retention-days: 5
