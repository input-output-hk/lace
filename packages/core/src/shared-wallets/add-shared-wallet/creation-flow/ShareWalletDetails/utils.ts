import type { NativeScript, SharedWalletSchema } from '../../../docs/schema/shared-wallet-type-autogenerated';
import { CreationFlowState } from '../../creation-flow/state-and-types';
import { QuorumRadioOption } from '../Quorum';

export const FILENAME = 'shared-wallet-config.json';

// Function to map CreationFlowState to the schema JSON structure
const mapStateToSchema = (state: CreationFlowState): SharedWalletSchema => {
  const { walletName, coSigners, quorumRules } = state;

  if (!quorumRules) {
    throw new Error('Quorum rules are not defined');
  }

  // Construct NativeScript based on quorum rules
  let nativeScript: NativeScript;

  switch (quorumRules.option) {
    case QuorumRadioOption.AllAddresses: {
      nativeScript = {
        scripts: coSigners.map((coSigner) => ({
          pubkey: coSigner.sharedWalletKey,
          tag: 'pubkey',
        })),
        tag: 'all',
      };
      break;
    }
    case QuorumRadioOption.Any: {
      nativeScript = {
        scripts: coSigners.map((coSigner) => ({
          pubkey: coSigner.sharedWalletKey,
          tag: 'pubkey',
        })),
        tag: 'any',
      };
      break;
    }
    case QuorumRadioOption.NOfK: {
      nativeScript = {
        n: quorumRules.numberOfCosigner,
        scripts: coSigners.map((coSigner) => ({
          pubkey: coSigner.sharedWalletKey,
          tag: 'pubkey',
        })),
        tag: 'n_of_k',
      };
      break;
    }
    default: {
      throw new Error('Invalid quorum option');
    }
  }

  return {
    metadata: {
      coSigners,
      sharedWalletName: walletName || '',
    },
    nativeScript,
  };
};

// Function to validate and download the wallet data as JSON
export const downloadWalletData = (state: CreationFlowState): void => {
  try {
    // Map the state to the schema structure
    const data = mapStateToSchema(state);

    // Create a JSON blob from the validated data
    const indentation = 2;
    const blob = new Blob([JSON.stringify(data, null, indentation)], { type: 'application/json' });

    // Create a link element to trigger the download
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = FILENAME;

    // Append the link to the document, trigger the download, and then remove the link
    document.body.append(link);
    link.click();
    link.remove();

    console.info(`JSON file downloaded and saved as ${FILENAME}`);
  } catch (error) {
    if (error instanceof Error) {
      console.error(`Failed to download JSON file: ${error.message}`);
    }
  }
};
